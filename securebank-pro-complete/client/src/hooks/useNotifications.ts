import { useState, useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';

interface Achievement {
  title: string;
  description: string;
}

export function useNotifications() {
  const { toast } = useToast();
  const [achievements, setAchievements] = useState<Achievement[]>([]);

  const showNotification = useCallback((
    message: string, 
    type: 'success' | 'error' | 'warning' | 'info' = 'info'
  ) => {
    const variants = {
      success: 'default',
      error: 'destructive',
      warning: 'default',
      info: 'default'
    } as const;

    const icons = {
      success: '‚úÖ',
      error: '‚ùå',
      warning: '‚ö†Ô∏è',
      info: '‚ÑπÔ∏è'
    };

    toast({
      title: `${icons[type]} Th√¥ng b√°o`,
      description: message,
      variant: variants[type],
      duration: type === 'error' ? 5000 : 3000,
    });
  }, [toast]);

  const showAchievement = useCallback((title: string, description: string) => {
    const achievement = { title, description };
    setAchievements(prev => [...prev, achievement]);

    // Show special achievement toast
    toast({
      title: 'üèÜ Huy hi·ªáu m·ªõi!',
      description: `${title} - ${description}`,
      duration: 5000,
      className: 'bg-gradient-to-r from-yellow-600 to-yellow-700 border-yellow-500 text-white',
    });

    // Auto-remove achievement after animation
    setTimeout(() => {
      setAchievements(prev => prev.filter(a => a !== achievement));
    }, 4000);
  }, [toast]);

  const showLevelUp = useCallback((level: number, bonus: number) => {
    toast({
      title: 'üéâ L√™n c·∫•p!',
      description: `Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t Level ${level} v√† nh·∫≠n ${bonus} ƒëi·ªÉm th∆∞·ªüng!`,
      duration: 4000,
      className: 'bg-gradient-to-r from-blue-600 to-purple-600 border-blue-500 text-white',
    });
  }, [toast]);

  const showGameComplete = useCallback((finalScore: number, level: number) => {
    toast({
      title: 'üéä Ho√†n th√†nh xu·∫•t s·∫Øc!',
      description: `Game k·∫øt th√∫c v·ªõi ${finalScore.toLocaleString('vi-VN')} ƒëi·ªÉm t·∫°i Level ${level}!`,
      duration: 6000,
      className: 'bg-gradient-to-r from-green-600 to-emerald-600 border-green-500 text-white',
    });
  }, [toast]);

  const showCriticalWarning = useCallback((message: string) => {
    toast({
      title: 'üö® C·∫£nh b√°o quan tr·ªçng!',
      description: message,
      duration: 10000,
      variant: 'destructive',
      className: 'bg-gradient-to-r from-red-600 to-red-700 border-red-500 text-white animate-pulse',
    });
  }, [toast]);

  const showSecurityAlert = useCallback((message: string, level: 'low' | 'medium' | 'high') => {
    const configs = {
      low: {
        title: 'üîí Th√¥ng tin b·∫£o m·∫≠t',
        className: 'bg-gradient-to-r from-green-600 to-green-700 border-green-500 text-white'
      },
      medium: {
        title: '‚ö†Ô∏è C·∫£nh b√°o b·∫£o m·∫≠t',
        className: 'bg-gradient-to-r from-yellow-600 to-orange-600 border-yellow-500 text-white'
      },
      high: {
        title: 'üö® Nguy hi·ªÉm b·∫£o m·∫≠t!',
        className: 'bg-gradient-to-r from-red-600 to-red-700 border-red-500 text-white animate-pulse'
      }
    };

    const config = configs[level];
    
    toast({
      title: config.title,
      description: message,
      duration: level === 'high' ? 8000 : 5000,
      className: config.className,
    });
  }, [toast]);

  const showQuizResult = useCallback((
    correct: boolean, 
    score: number, 
    explanation?: string
  ) => {
    if (correct) {
      toast({
        title: 'üéØ Ch√≠nh x√°c!',
        description: `Xu·∫•t s·∫Øc! B·∫°n nh·∫≠n ƒë∆∞·ª£c ${score} ƒëi·ªÉm.${explanation ? ` ${explanation}` : ''}`,
        duration: 4000,
        className: 'bg-gradient-to-r from-green-600 to-emerald-600 border-green-500 text-white',
      });
    } else {
      toast({
        title: '‚ùå Ch∆∞a ƒë√∫ng',
        description: `ƒê√°p √°n sai. ${explanation || 'H√£y h·ªçc h·ªèi th√™m v√† th·ª≠ l·∫°i!'}`,
        duration: 5000,
        variant: 'destructive',
      });
    }
  }, [toast]);

  const showTimeWarning = useCallback((timeLeft: number) => {
    const minutes = Math.floor(timeLeft / 60000);
    const seconds = Math.floor((timeLeft % 60000) / 1000);
    
    if (timeLeft <= 60000) { // Last minute
      toast({
        title: '‚è∞ C·∫£nh b√°o th·ªùi gian!',
        description: `Ch·ªâ c√≤n ${seconds} gi√¢y ƒë·ªÉ ho√†n th√†nh level!`,
        duration: 2000,
        className: 'bg-gradient-to-r from-red-600 to-red-700 border-red-500 text-white animate-pulse',
      });
    } else if (timeLeft <= 120000) { // Last 2 minutes
      toast({
        title: '‚è±Ô∏è Th·ªùi gian s·∫Øp h·∫øt',
        description: `C√≤n ${minutes} ph√∫t ${seconds} gi√¢y. H√£y nhanh l√™n!`,
        duration: 3000,
        className: 'bg-gradient-to-r from-yellow-600 to-orange-600 border-yellow-500 text-white',
      });
    }
  }, [toast]);

  const showConnectivityStatus = useCallback((online: boolean) => {
    if (online) {
      toast({
        title: 'üåê ƒê√£ k·∫øt n·ªëi',
        description: 'K·∫øt n·ªëi internet ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c. Game ti·∫øp t·ª•c b√¨nh th∆∞·ªùng.',
        duration: 3000,
        className: 'bg-gradient-to-r from-green-600 to-emerald-600 border-green-500 text-white',
      });
    } else {
      toast({
        title: 'üì∂ M·∫•t k·∫øt n·ªëi',
        description: 'ƒêang ch∆°i offline. M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø.',
        duration: 5000,
        className: 'bg-gradient-to-r from-gray-600 to-gray-700 border-gray-500 text-white',
      });
    }
  }, [toast]);

  return {
    showNotification,
    showAchievement,
    showLevelUp,
    showGameComplete,
    showCriticalWarning,
    showSecurityAlert,
    showQuizResult,
    showTimeWarning,
    showConnectivityStatus,
    achievements
  };
}
